#include <QtTest>

#include "testutils.h"
#include "tst_capacitytests.h"

Q_DECLARE_METATYPE(StringMatrix)
Q_DECLARE_METATYPE(size_tuple_t) // used for any data type (contains integer size_type values) - it cannot be redeclared with Q_DECL...
Q_DECLARE_METATYPE(size_tuple_array_t) // same here
Q_DECLARE_METATYPE(ConcatMode)
Q_DECLARE_METATYPE(SplitMode)

class StringMatrixCapacityTests : public QObject
{
    Q_OBJECT

private slots:
    // test functions
    void testCopiedVectorConstructor();
    void testMovedVectorConstructor();
    void testIdenticalElementsConstructor();
    void testDiagonalMatrixConstructor();
    void testCopyConstructor();
    void testMoveConstructor();
    void testCopyAssignmentOperator();
    void testMoveAssignmentOperator();
    void testTranspose();
    void testReserve();
    void testResizeAndDefaultNewValues();
    void testResizeAndSetNewValues();
    void testReserveAndResizeWithDefaultNewValues();
    void testReserveAndResizeAndSetNewValues();
    void testInsertRowAndDefaultNewValues();
    void testInsertRowAndSetNewValues();
    void testInsertColumnAndDefaultNewValues();
    void testInsertColumnAndSetNewValues();
    void testReserveAndInsertRowAndDefaultNewValues();
    void testReserveAndInsertRowAndSetNewValues();
    void testReserveAndInsertColumnAndDefaultNewValues();
    void testReserveAndInsertColumnAndSetNewValues();
    void testEraseRow();
    void testEraseColumn();
    void testCatByRow();
    void testCatByColumn();
    void testSplitByRow();
    void testSplitByColumn();
    void testReserveResizeAndEraseRowAndOrColumn(); // combined StringMatrix test (reserve/resize + erase row/column)

    // test data
    void testCopiedVectorConstructor_data();
    void testMovedVectorConstructor_data();
    void testIdenticalElementsConstructor_data();
    void testDiagonalMatrixConstructor_data();
    void testCopyConstructor_data();
    void testMoveConstructor_data();
    void testCopyAssignmentOperator_data();
    void testMoveAssignmentOperator_data();
    void testTranspose_data();
    void testReserve_data();
    void testResizeAndDefaultNewValues_data();
    void testResizeAndSetNewValues_data();
    void testReserveAndResizeWithDefaultNewValues_data();
    void testReserveAndResizeAndSetNewValues_data();
    void testInsertRowAndDefaultNewValues_data();
    void testInsertRowAndSetNewValues_data();
    void testInsertColumnAndDefaultNewValues_data();
    void testInsertColumnAndSetNewValues_data();
    void testReserveAndInsertRowAndDefaultNewValues_data();
    void testReserveAndInsertRowAndSetNewValues_data();
    void testReserveAndInsertColumnAndDefaultNewValues_data();
    void testReserveAndInsertColumnAndSetNewValues_data();
    void testEraseRow_data();
    void testEraseColumn_data();
    void testCatByRow_data();
    void testCatByColumn_data();
    void testSplitByRow_data();
    void testSplitByColumn_data();
    void testReserveResizeAndEraseRowAndOrColumn_data();

private:
    // test data helper methods
    void _buildMovedCopiedVectorConstructorsTestingTable();
    void _buildMoveCopyConstructorsTestingTable();
    void _buildAssignmentOperatorsTestingTable();
    void _buildReserveAndResizeTestingTable();
    void _buildResizeTestingTable();
    void _buildInsertRowTestingTable();
    void _buildInsertColumnTestingTable();
    void _buildReserveAndInsertRowTestingTable();
    void _buildReserveAndInsertColumnTestingTable();

    StringMatrix mPrimaryStringMatrix;
    StringMatrix mSecondaryStringMatrix;
};

void StringMatrixCapacityTests::testCopiedVectorConstructor()
{
    QFETCH(matrix_size_t, rowsCount);
    QFETCH(matrix_size_t, columnsCount);
    QFETCH(std::vector<std::string>, initList);
    QFETCH(matrix_size_t, expectedRowCapacity);
    QFETCH(matrix_size_t, expectedColumnCapacity);
    QFETCH(matrix_opt_size_t, expectedRowCapacityOffset);
    QFETCH(matrix_opt_size_t, expectedColumnCapacityOffset);

    StringMatrix matrix{rowsCount, columnsCount, initList};

    TEST_COPIED_VECTOR_CONSTRUCTOR_CHECK_MATRIX_CAPACITY(matrix, expectedRowCapacity, expectedColumnCapacity, expectedRowCapacityOffset, expectedColumnCapacityOffset);
}

void StringMatrixCapacityTests::testMovedVectorConstructor()
{
    QFETCH(matrix_size_t, rowsCount);
    QFETCH(matrix_size_t, columnsCount);
    QFETCH(std::vector<std::string>, initList);
    QFETCH(matrix_size_t, expectedRowCapacity);
    QFETCH(matrix_size_t, expectedColumnCapacity);
    QFETCH(matrix_opt_size_t, expectedRowCapacityOffset);
    QFETCH(matrix_opt_size_t, expectedColumnCapacityOffset);

    StringMatrix matrix{rowsCount, columnsCount, std::move(initList)};

    TEST_MOVED_VECTOR_CONSTRUCTOR_CHECK_MATRIX_CAPACITY(matrix, expectedRowCapacity, expectedColumnCapacity, expectedRowCapacityOffset, expectedColumnCapacityOffset);
}

void StringMatrixCapacityTests::testIdenticalElementsConstructor()
{
    TEST_CAPACITY_WITH_IDENTICAL_MATRIX_CONSTRUCTOR(std::string);
}

void StringMatrixCapacityTests::testDiagonalMatrixConstructor()
{
    TEST_CAPACITY_WITH_DIAGONAL_MATRIX_CONSTRUCTOR(std::string);
}

void StringMatrixCapacityTests::testCopyConstructor()
{
    TEST_CAPACITY_WITH_COPY_CONSTRUCTOR(std::string);
}

void StringMatrixCapacityTests::testMoveConstructor()
{
    TEST_CAPACITY_WITH_MOVE_CONSTRUCTOR(std::string);
}

void StringMatrixCapacityTests::testCopyAssignmentOperator()
{
    TEST_CAPACITY_WITH_COPY_ASSIGNMENT_OPERATOR(std::string);
}

void StringMatrixCapacityTests::testMoveAssignmentOperator()
{
    TEST_CAPACITY_WITH_MOVE_ASSIGNMENT_OPERATOR(std::string);
}

void StringMatrixCapacityTests::testTranspose()
{
    TEST_CAPACITY_WITH_TRANSPOSE(std::string, mPrimaryStringMatrix, mSecondaryStringMatrix);
}

void StringMatrixCapacityTests::testReserve()
{
    TEST_CAPACITY_WITH_RESERVE(std::string, mPrimaryStringMatrix);
}

void StringMatrixCapacityTests::testResizeAndDefaultNewValues()
{
    TEST_CAPACITY_WITH_RESIZE_AND_DEFAULT_NEW_VALUES(std::string, mPrimaryStringMatrix);
}

void StringMatrixCapacityTests::testResizeAndSetNewValues()
{
    TEST_CAPACITY_WITH_RESIZE_AND_FILL_IN_NEW_VALUES(std::string, mPrimaryStringMatrix);
}

/* Unlike the integer matrix scenario here it is possible to perform the consistency check by comparing the two resized matrixes (==)
   as the default values of the new elements are well determined */
void StringMatrixCapacityTests::testReserveAndResizeWithDefaultNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_RESIZE_AND_DEFAULT_NEW_VALUES(std::string, mPrimaryStringMatrix);
}

/* Same way to perform consistency check as for integer matrix scenario */
void StringMatrixCapacityTests::testReserveAndResizeAndSetNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_RESIZE_AND_FILL_IN_NEW_VALUES(std::string, mPrimaryStringMatrix);
}

void StringMatrixCapacityTests::testInsertRowAndDefaultNewValues()
{
    TEST_CAPACITY_WITH_INSERT_ROW_AND_DEFAULT_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testInsertRowAndSetNewValues()
{
    TEST_CAPACITY_WITH_INSERT_ROW_AND_FILL_IN_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testInsertColumnAndDefaultNewValues()
{
    TEST_CAPACITY_WITH_INSERT_COLUMN_AND_DEFAULT_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testInsertColumnAndSetNewValues()
{
    TEST_CAPACITY_WITH_INSERT_COLUMN_AND_FILL_IN_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testReserveAndInsertRowAndDefaultNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_INSERT_ROW_AND_DEFAULT_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testReserveAndInsertRowAndSetNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_INSERT_ROW_AND_FILL_IN_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testReserveAndInsertColumnAndDefaultNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_INSERT_COLUMN_AND_DEFAULT_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testReserveAndInsertColumnAndSetNewValues()
{
    TEST_CAPACITY_WITH_RESERVE_AND_INSERT_COLUMN_AND_FILL_IN_NEW_VALUES(std::string);
}

void StringMatrixCapacityTests::testEraseRow()
{
    TEST_CAPACITY_WITH_ERASE_ROW(std::string);
}

void StringMatrixCapacityTests::testEraseColumn()
{
    TEST_CAPACITY_WITH_ERASE_COLUMN(std::string);
}

void StringMatrixCapacityTests::testCatByRow()
{
    TEST_CAPACITY_WITH_CAT_BY_ROW(std::string);
}

void StringMatrixCapacityTests::testCatByColumn()
{
    TEST_CAPACITY_WITH_CAT_BY_COLUMN(std::string);
}

void StringMatrixCapacityTests::testSplitByRow()
{
    TEST_CAPACITY_WITH_SPLIT_BY_ROW(std::string);
}

void StringMatrixCapacityTests::testSplitByColumn()
{
    TEST_CAPACITY_WITH_SPLIT_BY_COLUMN(std::string);
}

void StringMatrixCapacityTests::testReserveResizeAndEraseRowAndOrColumn()
{
    TEST_CAPACITY_WITH_RESIZE_AND_ERASE_ROW_AND_OR_COLUMN(std::string, mPrimaryStringMatrix);
}

void StringMatrixCapacityTests::testCopiedVectorConstructor_data()
{
    _buildMovedCopiedVectorConstructorsTestingTable();
}

void StringMatrixCapacityTests::testMovedVectorConstructor_data()
{
    _buildMovedCopiedVectorConstructorsTestingTable();
}

void StringMatrixCapacityTests::testIdenticalElementsConstructor_data()
{
    QTest::addColumn<matrix_size_t>("rowsCount");
    QTest::addColumn<matrix_size_t>("columnsCount");
    QTest::addColumn<std::string>("elementValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small size matrix") << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value1"} << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small size matrix") << matrix_size_t{4u} << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: large size matrix") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("4: large size matrix") << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("5: capped row and column capacity") << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("6: capped row and column capacity") << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("7: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("8: capped row and column capacity") << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: capped row and column capacity") << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: capped row and column capacity") << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: capped row capacity") << c_LargeDimension1 << matrix_size_t{3u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("13: capped row capacity") << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{4u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: capped row capacity") << c_LargeDimension1 << matrix_size_t{8u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("16: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: capped row capacity") << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("18: capped column capacity") << matrix_size_t{3u} << c_LargeDimension1 << std::string{"Value"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("19: capped column capacity") << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: capped column capacity") << matrix_size_t{4u} << c_MaxAllowedDimension << std::string{"Value"} << matrix_size_t{5u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("21: capped column capacity") << matrix_size_t{8u} << c_LargeDimension1 << std::string{"Value"} << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("22: capped column capacity") << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("23: capped column capacity") << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::testDiagonalMatrixConstructor_data()
{
    QTest::addColumn<matrix_size_t>("rowsColumnsCount");
    QTest::addColumn<std::string>("nonDiagonalValue");
    QTest::addColumn<std::string>("diagonalValue");
    QTest::addColumn<matrix_size_t>("expectedRowColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowColumnCapacityOffset");

    QTest::newRow("1: small size matrix") << matrix_size_t{3u} << std::string{"Value1"} << std::string{"Value2"} << matrix_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small size matrix") << matrix_size_t{4u} << std::string{"Value1"} << std::string{"Value2"} << matrix_size_t{5u} << matrix_opt_size_t{0u};
    QTest::newRow("3: medium size matrix") << matrix_size_t{8u} << std::string{"Value1"} << std::string{"Value2"} << matrix_size_t{10u} << matrix_opt_size_t{1u};
    QTest::newRow("4: medium size matrix") << matrix_size_t{10u} << std::string{"Value1"} << std::string{"Value2"} << matrix_size_t{12u} << matrix_opt_size_t{1u};
    QTest::newRow("5: capped capacity") << c_LargeDimension1 << std::string{"Value1"} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_opt_size_t{1u};
    QTest::newRow("6: capped capacity") << c_LargeDimension2 << std::string{"Value1"} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_opt_size_t{0u};
    QTest::newRow("7: capped capacity") << c_MaxAllowedDimension << std::string{"Value1"} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::testCopyConstructor_data()
{
    _buildMoveCopyConstructorsTestingTable();
}

void StringMatrixCapacityTests::testMoveConstructor_data()
{
    _buildMoveCopyConstructorsTestingTable();
}

void StringMatrixCapacityTests::testCopyAssignmentOperator_data()
{
    _buildAssignmentOperatorsTestingTable();
}

void StringMatrixCapacityTests::testMoveAssignmentOperator_data()
{
    _buildAssignmentOperatorsTestingTable();
}

void StringMatrixCapacityTests::testTranspose_data()
{
    QTest::addColumn<StringMatrix>("srcMatrix");
    QTest::addColumn<StringMatrix>("destMatrix");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");
    QTest::addColumn<bool>("isTransposedToItself");

    QTest::newRow("1: transposed matrix initially empty") << StringMatrix{{3, 4}, "Value"} << StringMatrix{} << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("2: transposed matrix initially empty") << StringMatrix{{4, 3}, "Value"} << StringMatrix{} << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("3: transposed matrix initially empty") << StringMatrix{{7, 8}, "Value"} << StringMatrix{} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("4: transposed matrix initially empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << false;
    QTest::newRow("5: transposed matrix initially empty") << StringMatrix{{20, 25}, "Value"} << StringMatrix{} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u} << false;
    QTest::newRow("6: transposed matrix initially empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("7: transposed matrix initially NOT empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{5, 6}, "Value"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << false;
    QTest::newRow("8: transposed matrix initially NOT empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{6, 6}, "Value"} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << false;
    QTest::newRow("9: transposed matrix initially NOT empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{5, 7}, "Value"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("10: transposed matrix initially NOT empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{6, 7}, "Value"} << matrix_size_t{7u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("11: transposed matrix initially NOT empty") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{7, 8}, "Value"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << false;
    QTest::newRow("12: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{15, 19}, "Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("13: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{16, 19}, "Value"} << matrix_size_t{20u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("14: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{15, 20}, "Value"} << matrix_size_t{25u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("15: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{16, 20}, "Value"} << matrix_size_t{20u} << matrix_size_t{25u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("16: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{20, 25}, "Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("17: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{15, 25}, "Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("18: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{16, 25}, "Value"} << matrix_size_t{20u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("19: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{20, 19}, "Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u} << false;
    QTest::newRow("20: transposed matrix initially NOT empty") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{20, 20}, "Value"} << matrix_size_t{25u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << false;
    QTest::newRow("21: matrix transposed to itself") << StringMatrix{{3, 3}, "Value"} << StringMatrix{{3, 3}, "Value"} << matrix_size_t{3u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << true;
    QTest::newRow("22: matrix transposed to itself") << StringMatrix{{3, 4}, "Value"} << StringMatrix{{3, 4}, "Value"} << matrix_size_t{5u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << true;
    QTest::newRow("23: matrix transposed to itself") << StringMatrix{{4, 3}, "Value"} << StringMatrix{{4, 3}, "Value"} << matrix_size_t{5u} << matrix_size_t{5u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << true;
    QTest::newRow("24: matrix transposed to itself") << StringMatrix{{4, 4}, "Value"} << StringMatrix{{4, 4}, "Value"} << matrix_size_t{5u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << true;
    QTest::newRow("25: matrix transposed to itself") << StringMatrix{{7, 8}, "Value"} << StringMatrix{{7, 8}, "Value"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << true;
    QTest::newRow("26: matrix transposed to itself") << StringMatrix{{8, 7}, "Value"} << StringMatrix{{8, 7}, "Value"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << true;
    QTest::newRow("27: matrix transposed to itself") << StringMatrix{{20, 25}, "Value"} << StringMatrix{{20, 25}, "Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{5u} << true;
    QTest::newRow("28: matrix transposed to itself") << StringMatrix{{25, 20}, "Value"} << StringMatrix{{25, 20}, "Value"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{5u} << matrix_opt_size_t{0u} << true;
    QTest::newRow("29: matrix transposed to itself") << StringMatrix{{25, 25}, "Value"} << StringMatrix{{25, 25}, "Value"} << matrix_size_t{31u} << matrix_size_t{31u} << matrix_opt_size_t{3u} << matrix_opt_size_t{3u} << true;
    QTest::newRow("30: matrix transposed to itself") << StringMatrix{{20, 26}, "Value"} << StringMatrix{{20, 26}, "Value"} << matrix_size_t{32u} << matrix_size_t{32u} << matrix_opt_size_t{3u} << matrix_opt_size_t{6u} << true;
    QTest::newRow("31: matrix transposed to itself") << StringMatrix{{26, 20}, "Value"} << StringMatrix{{26, 20}, "Value"} << matrix_size_t{32u} << matrix_size_t{32u} << matrix_opt_size_t{6u} << matrix_opt_size_t{3u} << true;
}

void StringMatrixCapacityTests::testReserve_data()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    const matrix_size_t c_RowsCount{10};
    const matrix_opt_size_t c_LargeDimensionRowCapacityOffset{(c_LargeDimension2 - c_RowsCount) / 2};
    const matrix_opt_size_t c_MaxDimensionRowCapacityOffset{(c_MaxAllowedDimension - c_RowsCount) / 2};

    const matrix_size_t c_ColumnsCount{8};
    const matrix_opt_size_t c_LargeDimensionColumnCapacityOffset{(c_LargeDimension2 - c_ColumnsCount) / 2};
    const matrix_opt_size_t c_MaxDimensionColumnCapacityOffset{(c_MaxAllowedDimension - c_ColumnsCount) / 2};

    QTest::newRow("1: row capacity < rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: row capacity < rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{0u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: row capacity < rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: row capacity < rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("5: row capacity < rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("6: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("7: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("8: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("9: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << c_LargeDimension2 << matrix_size_t{10u} << c_LargeDimension2 << matrix_opt_size_t{0u} << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("10: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << c_MaxAllowedDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("11: row capacity < rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << c_ExceedingDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("12: row capacity == rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: row capacity == rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: row capacity == rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("16: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("18: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << c_LargeDimension2 << matrix_size_t{10u} << c_LargeDimension2 << matrix_opt_size_t{0u} << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("19: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("20: row capacity == rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << c_ExceedingDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("21: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("23: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("24: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("25: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("26: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("27: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{8u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("28: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{7u} << c_LargeDimension2 << matrix_size_t{8u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("29: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("30: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{7u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("31: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("32: row capacity > rows count, column capacity < columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{7u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("33: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("34: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("35: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("36: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{8u} << c_LargeDimension2 << matrix_size_t{8u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("37: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("38: row capacity > rows count, column capacity == columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{8u} << c_MaxAllowedDimension << matrix_size_t{8u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("39: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("40: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("41: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("42: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << c_LargeDimension2 << matrix_size_t{11u} << c_LargeDimension2 << matrix_opt_size_t{0u} << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("43: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << c_MaxAllowedDimension << matrix_size_t{11u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("44: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << c_ExceedingDimension << matrix_size_t{11u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("45: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("46: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("47: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("48: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << c_LargeDimension2 << matrix_size_t{12u} << c_LargeDimension2 << matrix_opt_size_t{1u} << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("49: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("50: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << c_ExceedingDimension << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("51: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("52: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("53: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("54: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << c_LargeDimension2 << matrix_size_t{13u} << c_LargeDimension2 << matrix_opt_size_t{1u} << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("55: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << c_MaxAllowedDimension << matrix_size_t{13u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("56: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << c_ExceedingDimension << matrix_size_t{13u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("57: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{9u} << c_LargeDimension2 << matrix_size_t{9u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("58: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{10u} << c_LargeDimension2 << matrix_size_t{10u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("59: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{11u} << c_LargeDimension2 << matrix_size_t{11u} << c_LargeDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("60: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimensionRowCapacityOffset << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("61: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("62: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("63: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{9u} << c_MaxAllowedDimension << matrix_size_t{9u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("64: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_size_t{10u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("65: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{11u} << c_MaxAllowedDimension << matrix_size_t{11u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("66: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxDimensionRowCapacityOffset << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("67: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("68: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("69: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{9u} << c_MaxAllowedDimension << matrix_size_t{9u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("70: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_size_t{10u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("71: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << matrix_size_t{11u} << c_MaxAllowedDimension << matrix_size_t{11u} << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("72: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxDimensionRowCapacityOffset << c_LargeDimensionColumnCapacityOffset;
    QTest::newRow("73: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("74: row capacity > rows count, column capacity > columns count") << StringMatrix{{10, 8}, "Value1"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << c_MaxDimensionColumnCapacityOffset;
    QTest::newRow("75: row capacity < rows count, column capacity < columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("76: row capacity < rows count, column capacity == columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("77: row capacity < rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("78: row capacity < rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("79: row capacity == rows count, column capacity < columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("80: row capacity == rows count, column capacity == columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("81: row capacity == rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("82: row capacity == rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("83: row capacity > rows count, column capacity < columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("84: row capacity > rows count, column capacity < columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("85: row capacity > rows count, column capacity == columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("86: row capacity > rows count, column capacity == columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("87: row capacity > rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("88: row capacity > rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("89: row capacity > rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("90: row capacity > rows count, column capacity > columns count") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};

    // empty matrix
    QTest::newRow("91: empty matrix") << StringMatrix{} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_opt_size_t{} << matrix_opt_size_t{};
    QTest::newRow("92: empty matrix") << StringMatrix{} << matrix_size_t{0u} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_opt_size_t{} << matrix_opt_size_t{};
    QTest::newRow("93: empty matrix") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_opt_size_t{} << matrix_opt_size_t{};
    QTest::newRow("94: empty matrix") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_opt_size_t{} << matrix_opt_size_t{};
}

void StringMatrixCapacityTests::testResizeAndDefaultNewValues_data()
{
    _buildResizeTestingTable();
}

void StringMatrixCapacityTests::testResizeAndSetNewValues_data()
{
    _buildResizeTestingTable();
}

void StringMatrixCapacityTests::testReserveAndResizeWithDefaultNewValues_data()
{
    _buildReserveAndResizeTestingTable();
}

void StringMatrixCapacityTests::testReserveAndResizeAndSetNewValues_data()
{
    _buildReserveAndResizeTestingTable();
}

void StringMatrixCapacityTests::testInsertRowAndDefaultNewValues_data()
{
    _buildInsertRowTestingTable();
}

void StringMatrixCapacityTests::testInsertRowAndSetNewValues_data()
{
    _buildInsertRowTestingTable();
}

void StringMatrixCapacityTests::testInsertColumnAndDefaultNewValues_data()
{
    _buildInsertColumnTestingTable();
}

void StringMatrixCapacityTests::testInsertColumnAndSetNewValues_data()
{
    _buildInsertColumnTestingTable();
}

void StringMatrixCapacityTests::testReserveAndInsertRowAndDefaultNewValues_data()
{
    _buildReserveAndInsertRowTestingTable();
}

void StringMatrixCapacityTests::testReserveAndInsertRowAndSetNewValues_data()
{
    _buildReserveAndInsertRowTestingTable();
}

void StringMatrixCapacityTests::testReserveAndInsertColumnAndDefaultNewValues_data()
{
    _buildReserveAndInsertColumnTestingTable();
}

void StringMatrixCapacityTests::testReserveAndInsertColumnAndSetNewValues_data()
{
    _buildReserveAndInsertColumnTestingTable();
}

void StringMatrixCapacityTests::testEraseRow_data()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<size_tuple_array_t>("erasedRowsAndExpectedCapacitiesWithOffsets");

    QTest::newRow("1: less rows than columns") << StringMatrix{{3, 4}, "Value"} << size_tuple_array_t{{1u, 3u, 5u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {1u, 3u, 5u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("2: less rows than columns") << StringMatrix{{10, 15}, "Value"} << size_tuple_array_t{{1u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{5u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{6u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{7u}, matrix_opt_size_t{1u}}, {1u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 18u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("3: less rows than columns") << StringMatrix{{10, 15}, "Value"} << size_tuple_array_t{{8u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 18u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("4: less rows than columns") << StringMatrix{{10, 15}, "Value"} << size_tuple_array_t{{0u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {8u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {6u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {4u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 18u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("5: less rows than columns") << StringMatrix{{10, 15}, "Value"} << size_tuple_array_t{{9u, 12u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {5u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {3u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 6u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {1u, 2u, 18u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("6: less rows than columns") << StringMatrix{{10, 15}, "Value"} << size_tuple_array_t{{3u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {6u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 18u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {2u, 12u, 18u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {2u, 12u, 18u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 18u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 18u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("7: square matrix") << StringMatrix{{4, 4}, "Value"} << size_tuple_array_t{{1u, 5u, 5u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {1u, 5u, 5u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {1u, 2u, 5u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("8: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{1, 12, 12, 2, 1}, {1u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {1u, 12u, 12u, matrix_opt_size_t{5u}, matrix_opt_size_t{1u}}, {1u, 12u, 12u, matrix_opt_size_t{6u}, matrix_opt_size_t{1u}}, {1u, 12u, 12u, matrix_opt_size_t{7u}, matrix_opt_size_t{1u}}, {1u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 12u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("9: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{8u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 12u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("10: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{0u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {8u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {6u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {4u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 12u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("11: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{9u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {5u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {3u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 6u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {1u, 2u, 12u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("12: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{3u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {6u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 12u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {2u, 12u, 12u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {2u, 12u, 12u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 12u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("13: more rows than columns") << StringMatrix{{7, 5}, "Value"} << size_tuple_array_t{{1u, 8u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {1u, 8u, 6u, matrix_opt_size_t{2u}, matrix_opt_size_t{0u}}, {1u, 8u, 6u, matrix_opt_size_t{3u}, matrix_opt_size_t{0u}}, {1u, 8u, 6u, matrix_opt_size_t{4u}, matrix_opt_size_t{0u}}, {1u, 4u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {1u, 2u, 6u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("14: more rows than columns") << StringMatrix{{10, 9}, "Value"} << size_tuple_array_t{{1u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{5u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{6u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{7u}, matrix_opt_size_t{1u}}, {1u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 11u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("15: more rows than columns") << StringMatrix{{10, 9}, "Value"} << size_tuple_array_t{{8u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 11u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("16: more rows than columns") << StringMatrix{{10, 9}, "Value"} << size_tuple_array_t{{0u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {8u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {6u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {4u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 2u, 11u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("17: more rows than columns") << StringMatrix{{10, 9}, "Value"} << size_tuple_array_t{{9u, 12u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {0u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {5u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {0u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {3u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 6u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {1u, 2u, 11u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("18: more rows than columns") << StringMatrix{{10, 9}, "Value"} << size_tuple_array_t{{3u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {6u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {7u, 12u, 11u, matrix_opt_size_t{2u}, matrix_opt_size_t{1u}}, {2u, 12u, 11u, matrix_opt_size_t{3u}, matrix_opt_size_t{1u}}, {1u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {2u, 12u, 11u, matrix_opt_size_t{4u}, matrix_opt_size_t{1u}}, {0u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 6u, 11u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 2u, 11u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
}

void StringMatrixCapacityTests::testEraseColumn_data()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<size_tuple_array_t>("erasedColumnsAndExpectedCapacitiesWithOffsets");

    QTest::newRow("1: less columns than rows") << StringMatrix{{4, 3}, "Value"} << size_tuple_array_t{{1u, 5u, 3u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {1u, 5u, 3u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("2: less columns than rows") << StringMatrix{{15, 10}, "Value"} << size_tuple_array_t{{1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{5u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{6u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{7u}}, {1u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 18u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("3: less columns than rows") << StringMatrix{{15, 10}, "Value"} << size_tuple_array_t{{8u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 18u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("4: less columns than rows") << StringMatrix{{15, 10}, "Value"} << size_tuple_array_t{{0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {8u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {6u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {4u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 18u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("5: less columns than rows") << StringMatrix{{15, 10}, "Value"} << size_tuple_array_t{{9u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {5u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {3u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 18u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("6: less columns than rows") << StringMatrix{{15, 10}, "Value"} << size_tuple_array_t{{3u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {6u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {2u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {2u, 18u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 18u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 18u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("7: square matrix") << StringMatrix{{4, 4}, "Value"} << size_tuple_array_t{{1u, 5u, 5u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {1u, 5u, 5u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {1u, 5u, 2u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("8: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{5u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{6u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{7u}}, {1u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 12u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("9: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{8u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("10: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {8u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {6u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {4u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("11: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{9u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {5u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {3u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 12u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("12: square matrix") << StringMatrix{{10, 10}, "Value"} << size_tuple_array_t{{3u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {6u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {2u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {2u, 12u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 12u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 12u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("13: more columns than rows") << StringMatrix{{5, 7}, "Value"} << size_tuple_array_t{{1u, 6u, 8u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {1u, 6u, 8u, matrix_opt_size_t{0u}, matrix_opt_size_t{2u}}, {1u, 6u, 8u, matrix_opt_size_t{0u}, matrix_opt_size_t{3u}}, {1u, 6u, 8u, matrix_opt_size_t{0u}, matrix_opt_size_t{4u}}, {1u, 6u, 4u, matrix_opt_size_t{0u}, matrix_opt_size_t{1u}}, {1u, 6u, 2u, matrix_opt_size_t{0u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("14: more columns than rows") << StringMatrix{{9, 10}, "Value"} << size_tuple_array_t{{1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{5u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{6u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{7u}}, {1u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 11u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("15: more columns than rows") << StringMatrix{{9, 10}, "Value"} << size_tuple_array_t{{8u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {7u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {6u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {5u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {4u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {3u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 11u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("16: more columns than rows") << StringMatrix{{9, 10}, "Value"} << size_tuple_array_t{{0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {8u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {6u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {4u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {2u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 11u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("17: more columns than rows") << StringMatrix{{9, 10}, "Value"} << size_tuple_array_t{{9u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {5u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {0u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {3u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {0u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {1u, 11u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
    QTest::newRow("18: more columns than rows") << StringMatrix{{9, 10}, "Value"} << size_tuple_array_t{{3u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {6u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {7u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{2u}}, {2u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{3u}}, {1u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {2u, 11u, 12u, matrix_opt_size_t{1u}, matrix_opt_size_t{4u}}, {0u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 11u, 6u, matrix_opt_size_t{1u}, matrix_opt_size_t{1u}}, {1u, 11u, 2u, matrix_opt_size_t{1u}, matrix_opt_size_t{0u}}, {0u, 0u, 0u, matrix_opt_size_t{}, matrix_opt_size_t{}}};
}

void StringMatrixCapacityTests::testCatByRow_data()
{
    QTest::addColumn<StringMatrix>("destMatrix");
    QTest::addColumn<StringMatrix>("srcMatrix");
    QTest::addColumn<ConcatMode>("mode");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("5: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("6: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("7: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("8: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("12: different matrixes") << StringMatrix{{5, 7}, "Value2"} << StringMatrix{{4, 7}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("13: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{10, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{26u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("14: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{10, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{26u} << matrix_size_t{22u} << matrix_size_t{26u} << matrix_size_t{22u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{10, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{31u} << matrix_size_t{26u} << matrix_size_t{31u} << matrix_size_t{26u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("16: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{10, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("17: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{10, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{33u} << matrix_size_t{28u} << matrix_size_t{33u} << matrix_size_t{28u} << matrix_opt_size_t{3u} << matrix_opt_size_t{3u};
    QTest::newRow("18: different matrixes") << StringMatrix{{10, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{26u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("19: different matrixes") << StringMatrix{{10, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{26u} << matrix_size_t{22u} << matrix_size_t{26u} << matrix_size_t{22u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: different matrixes") << StringMatrix{{10, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{31u} << matrix_size_t{26u} << matrix_size_t{31u} << matrix_size_t{26u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("21: different matrixes") << StringMatrix{{10, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("22: different matrixes") << StringMatrix{{10, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{33u} << matrix_size_t{28u} << matrix_size_t{33u} << matrix_size_t{28u} << matrix_opt_size_t{3u} << matrix_opt_size_t{3u};
    QTest::newRow("23: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{1, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{20u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("24: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{2, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{20u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("25: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{3, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{20u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("26: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{4, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{20u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("27: different matrixes") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{{5, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("28: different matrixes") << StringMatrix{{1, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{17u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("29: different matrixes") << StringMatrix{{2, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("30: different matrixes") << StringMatrix{{3, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{19u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("31: different matrixes") << StringMatrix{{4, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{20u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("32: different matrixes") << StringMatrix{{5, 22}, "Value2"} << StringMatrix{{16, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("33: different matrixes") << StringMatrix{{c_LargeDimension2, 22}, "Value1"} << StringMatrix{{1, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("34: different matrixes") << StringMatrix{{c_LargeDimension1, 22}, "Value1"} << StringMatrix{{2, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("35: different matrixes") << StringMatrix{{1, 22}, "Value2"} << StringMatrix{{c_LargeDimension2, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("36: different matrixes") << StringMatrix{{2, 22}, "Value2"} << StringMatrix{{c_LargeDimension1, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("37: different matrixes") << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << StringMatrix{{1, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("38: different matrixes") << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << StringMatrix{{2, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("39: different matrixes") << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << StringMatrix{{3, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("40: different matrixes") << StringMatrix{{1, 22}, "Value2"} << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("41: different matrixes") << StringMatrix{{2, 22}, "Value2"} << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("42: different matrixes") << StringMatrix{{3, 22}, "Value2"} << StringMatrix{{c_LargeDimension0, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("43_1a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension1 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_2a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_3a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_4a: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_5a: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_6a: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_7a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
        QTest::newRow("43_8a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_9a: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_10a: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_11a: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_12a: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    }
    else
    {
        QTest::newRow("43_1b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension0 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_2b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension1 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_3b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_4b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension1 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_5b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_6b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_7b: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_LargeDimension2 << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_8b: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_9b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
        QTest::newRow("43_10b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
        QTest::newRow("43_11b: different matrixes") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_12b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
        QTest::newRow("43_13b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_14b: different matrixes") << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_15b: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
        QTest::newRow("43_16b: different matrixes") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 22}, "Value2"} << StringMatrix{{c_HalfMaxAllowedDimension, 22}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    }

    QTest::newRow("44: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("45: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{7u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("47: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("48: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("49: same matrix") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("50: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("51: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{31u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("52: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("53: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{33u} << matrix_size_t{27u} << matrix_size_t{33u} << matrix_size_t{27u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("54: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{34u} << matrix_size_t{27u} << matrix_size_t{34u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("55: same matrix") << StringMatrix{{16, 22}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{38u} << matrix_size_t{27u} << matrix_size_t{38u} << matrix_size_t{27u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};

    // additional tests for checking impact on column capacity when reserving and concatenating
    QTest::newRow("56: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("57: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("58: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("59: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("60: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{6u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("61: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("62: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("63: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("64: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("65: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("66: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("67: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("68: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("69: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("70: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("71: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("72: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{6u} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("73: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("74: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("75: different matrixes") << StringMatrix{{4, 7}, "Value1"} << StringMatrix{{5, 7}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
}

void StringMatrixCapacityTests::testCatByColumn_data()
{
    QTest::addColumn<StringMatrix>("destMatrix");
    QTest::addColumn<StringMatrix>("srcMatrix");
    QTest::addColumn<ConcatMode>("mode");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("5: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("6: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("7: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("8: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("11: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("12: different matrixes") << StringMatrix{{7, 5}, "Value2"} << StringMatrix{{7, 4}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};  // not fully equivalent to the similar catByRow() test: no offset balancing/change, second matrix fits into the right side available capacity
    QTest::newRow("13: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 10}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{26u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("14: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 10}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{22u} << matrix_size_t{26u} << matrix_size_t{22u} << matrix_size_t{26u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 10}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{26u} << matrix_size_t{31u} << matrix_size_t{26u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{5u};
    QTest::newRow("16: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 10}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_opt_size_t{2u} << matrix_opt_size_t{6u};
    QTest::newRow("17: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 10}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{28u} << matrix_size_t{33u} << matrix_size_t{28u} << matrix_size_t{33u} << matrix_opt_size_t{3u} << matrix_opt_size_t{7u};
    QTest::newRow("18: different matrixes") << StringMatrix{{22, 10}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{26u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("19: different matrixes") << StringMatrix{{22, 10}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{22u} << matrix_size_t{26u} << matrix_size_t{22u} << matrix_size_t{26u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: different matrixes") << StringMatrix{{22, 10}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{26u} << matrix_size_t{31u} << matrix_size_t{26u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{5u};
    QTest::newRow("21: different matrixes") << StringMatrix{{22, 10}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_opt_size_t{2u} << matrix_opt_size_t{6u};
    QTest::newRow("22: different matrixes") << StringMatrix{{22, 10}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{28u} << matrix_size_t{33u} << matrix_size_t{28u} << matrix_size_t{33u} << matrix_opt_size_t{3u} << matrix_opt_size_t{7u};
    QTest::newRow("23: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 1}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u}; // not fully equivalent to the similar catByRow() test: no offset balancing/change, second matrix fits into the right side available capacity
    QTest::newRow("24: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 2}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u}; // not fully equivalent to the similar catByRow() test: no offset balancing/change, second matrix fits into the right side available capacity
    QTest::newRow("25: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 3}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("26: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 4}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("27: different matrixes") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{{22, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{21u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("28: different matrixes") << StringMatrix{{22, 1}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{17u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("29: different matrixes") << StringMatrix{{22, 2}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{18u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("30: different matrixes") << StringMatrix{{22, 3}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{19u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("31: different matrixes") << StringMatrix{{22, 4}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("32: different matrixes") << StringMatrix{{22, 5}, "Value2"} << StringMatrix{{22, 16}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{21u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("33: different matrixes") << StringMatrix{{22, c_LargeDimension2}, "Value1"} << StringMatrix{{22, 1}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("34: different matrixes") << StringMatrix{{22, c_LargeDimension1}, "Value1"} << StringMatrix{{22, 2}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("35: different matrixes") << StringMatrix{{22, 1}, "Value2"} << StringMatrix{{22, c_LargeDimension2}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("36: different matrixes") << StringMatrix{{22, 2}, "Value2"} << StringMatrix{{22, c_LargeDimension1}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("37: different matrixes") << StringMatrix{{22, c_LargeDimension0}, "Value1"} << StringMatrix{{22, 1}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("38: different matrixes") << StringMatrix{{22, c_LargeDimension0}, "Value1"} << StringMatrix{{22, 2}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};  // not fully equivalent to the similar catByRow() test: no offset balancing/change, second matrix fits into the right side available capacity
    QTest::newRow("39: different matrixes") << StringMatrix{{22, c_LargeDimension0}, "Value1"} << StringMatrix{{22, 3}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("40: different matrixes") << StringMatrix{{22, 1}, "Value2"} << StringMatrix{{22, c_LargeDimension0}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("41: different matrixes") << StringMatrix{{22, 2}, "Value2"} << StringMatrix{{22, c_LargeDimension0}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("42: different matrixes") << StringMatrix{{22, 3}, "Value2"} << StringMatrix{{22, c_LargeDimension0}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("43_1a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension1 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_2a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension2 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_3a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_4a: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension2 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_5a: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_6a: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_7a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
        QTest::newRow("43_8a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
        QTest::newRow("43_9a: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_10a: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
        QTest::newRow("43_11a: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_12a: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    }
    else
    {
        QTest::newRow("43_1b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension0 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_2b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension1 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_3b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension2 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_4b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension1 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_5b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension2 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_6b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_7b: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_LargeDimension2 << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_8b: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_9b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
        QTest::newRow("43_10b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
        QTest::newRow("43_11b: different matrixes") << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
        QTest::newRow("43_12b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
        QTest::newRow("43_13b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
        QTest::newRow("43_14b: different matrixes") << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
        QTest::newRow("43_15b: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_DecrHalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
        QTest::newRow("43_16b: different matrixes") << StringMatrix{{22, c_IncrHalfMaxAllowedDimension}, "Value2"} << StringMatrix{{22, c_HalfMaxAllowedDimension}, "Value1"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_size_t{27u} << c_MaxAllowedDimension << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    }

    QTest::newRow("44: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("45: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("47: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("48: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("49: same matrix") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{4u};  // not fully equivalent to the similar catByRow() test: no offset balancing/change, second matrix fits into the right side available capacity
    QTest::newRow("50: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("51: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{27u} << matrix_size_t{31u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("52: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{27u} << matrix_size_t{32u} << matrix_size_t{27u} << matrix_size_t{32u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("53: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{27u} << matrix_size_t{33u} << matrix_size_t{27u} << matrix_size_t{33u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("54: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{27u} << matrix_size_t{34u} << matrix_size_t{27u} << matrix_size_t{34u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("55: same matrix") << StringMatrix{{22, 16}, "Value1"} << StringMatrix{} << ConcatMode::TO_ITSELF << matrix_size_t{27u} << matrix_size_t{38u} << matrix_size_t{27u} << matrix_size_t{38u} << matrix_opt_size_t{2u} << matrix_opt_size_t{6u};

    // additional tests for checking impact on row capacity when reserving and concatenating
    QTest::newRow("56: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{6u} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("57: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{7u} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("58: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("59: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("60: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{6u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("61: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{7u} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("62: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("63: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("64: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("65: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("66: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("67: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("68: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("69: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("70: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("71: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("72: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{6u} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("73: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("74: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("75: different matrixes") << StringMatrix{{7, 4}, "Value1"} << StringMatrix{{7, 5}, "Value2"} << ConcatMode::SOURCE_TO_DESTINATION << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
}

void StringMatrixCapacityTests::testSplitByRow_data()
{
    QTest::addColumn<StringMatrix>("srcMatrix");
    QTest::addColumn<StringMatrix>("destMatrix");
    QTest::addColumn<matrix_size_t>("splitPosition");
    QTest::addColumn<matrix_size_t>("requestedDestRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedDestColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedSrcRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedSrcColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedDestRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedDestColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedSrcRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedSrcColumnCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedDestRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedDestColumnCapacityOffset");

    QTest::newRow("1: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{16u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{17u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("5: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("6: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{19u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{19u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("7: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{16u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("8: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{19u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{19u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("11: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{16u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("15: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{16u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{9u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("16: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{17u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{9u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("17: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{9u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("18: capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{19u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{9u} << matrix_size_t{19u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("19: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 13}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 14}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("21: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 15}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{5, 16}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{20u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("23: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{6, 13}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("24: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{6, 14}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("25: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{6, 15}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("26: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{6, 16}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{7u} << matrix_size_t{20u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("27: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{7, 13}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("28: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{7, 14}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("29: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{7, 15}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("30: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{7, 16}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{8u} << matrix_size_t{20u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("31: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{8, 13}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{10u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("32: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{8, 14}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{10u} << matrix_size_t{17u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("33: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{8, 15}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{10u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("34: NO capacity reserve for destination matrix") << StringMatrix{{15, 17}, "Value1"} << StringMatrix{{8, 16}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{18u} << matrix_size_t{21u} << matrix_size_t{10u} << matrix_size_t{20u} << matrix_opt_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("35: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{1u} << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("36: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_HalfMaxAllowedDimension}, "Value2"} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{1u} << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("37: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{3, c_HalfMaxAllowedDimension}, "Value2"} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{3u} << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("38: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{1u} << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("39: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_MaxAllowedDimension}, "Value2"} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{1u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("40: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{3, c_MaxAllowedDimension}, "Value2"} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("41a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("42a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_HalfMaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("43a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_LargeDimension1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("44a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_MaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("45a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("46a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_HalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("47a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("48a: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_MaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("49a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("50a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension0, c_HalfMaxAllowedDimension}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{0u};
        QTest::newRow("51a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension0, c_LargeDimension1}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u};
        QTest::newRow("52a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u};
        QTest::newRow("53a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("54a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("55a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("56a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("57a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("58a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("59a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("60a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("61a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("62a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("63a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("64a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("65a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("66a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("67a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("68a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("69a: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    }
    else
    {
        QTest::newRow("41b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("42b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_HalfMaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("43b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_LargeDimension1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("44b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{1, c_MaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("45b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("46b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_HalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("47b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("48b: NO capacity reserve for destination matrix") << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension2, c_MaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("49b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("50b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension0, c_HalfMaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{0u};
        QTest::newRow("51b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension0, c_LargeDimension1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u};
        QTest::newRow("52b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_LargeDimension0, c_MaxAllowedDimension}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{1u};
        QTest::newRow("53b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("54b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("55b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("56b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("57b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("58b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("59b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("60b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("61b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("62b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("63b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("64b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("65b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
        QTest::newRow("66b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("67b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("68b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("69b: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << StringMatrix{{c_IncrHalfMaxAllowedDimension, c_DecrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{c_HalfMaxAllowedDimension} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    }
}

void StringMatrixCapacityTests::testSplitByColumn_data()
{
    QTest::addColumn<StringMatrix>("srcMatrix");
    QTest::addColumn<StringMatrix>("destMatrix");
    QTest::addColumn<matrix_size_t>("splitPosition");
    QTest::addColumn<matrix_size_t>("requestedDestRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedDestColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedSrcRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedSrcColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedDestRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedDestColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedSrcRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedSrcColumnCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedDestRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedDestColumnCapacityOffset");

    QTest::newRow("1: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{16u} << matrix_size_t{6u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_size_t{6u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("5: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_size_t{6u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("6: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_size_t{6u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{19u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("7: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{16u} << matrix_size_t{7u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("8: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_size_t{7u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_size_t{7u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{19u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("11: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{16u} << matrix_size_t{8u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_size_t{8u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_size_t{8u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_size_t{8u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{19u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("15: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{16u} << matrix_size_t{9u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("16: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{17u} << matrix_size_t{9u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{18u} << matrix_size_t{9u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("18: capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{8, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{19u} << matrix_size_t{9u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{19u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("19: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{13, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{14, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("21: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{15, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{16, 5}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{20u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("23: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{13, 6}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("24: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{14, 6}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("25: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{15, 6}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("26: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{16, 6}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{20u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("27: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{13, 7}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("28: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{14, 7}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("29: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{15, 7}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("30: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{16, 7}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{20u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("31: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{13, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("32: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{14, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{17u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("33: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{15, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{18u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("34: NO capacity reserve for destination matrix") << StringMatrix{{17, 15}, "Value1"} << StringMatrix{{16, 8}, "Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{21u} << matrix_size_t{18u} << matrix_size_t{20u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("35: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("36: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 1}, "Value2"} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("37: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 3}, "Value2"} << c_LargeDimension2 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("38: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("39: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, 1}, "Value2"} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{1u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("40: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, 3}, "Value2"} << c_LargeDimension1 << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("41a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("42a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("43a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_LargeDimension1, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("44a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    }
    else
    {
        QTest::newRow("41b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_IncrHalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("42b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_IncrHalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("43b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_LargeDimension1, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
        QTest::newRow("44b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, 1}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_IncrHalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    }

    QTest::newRow("45: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, c_LargeDimension2}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("47: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("48: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_MaxAllowedDimension}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension2}, "Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("49a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("50a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, c_LargeDimension0}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2};
        QTest::newRow("51a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_LargeDimension1, c_LargeDimension0}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2};
        QTest::newRow("52a: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension1}, "Value2"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2};
    }
    else
    {
        QTest::newRow("49b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_HalfMaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
        QTest::newRow("50b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_HalfMaxAllowedDimension, c_LargeDimension0}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2};
        QTest::newRow("51b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_LargeDimension1, c_LargeDimension0}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2};
        QTest::newRow("52b: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_MaxAllowedDimension, c_LargeDimension0}, "Value2"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{c_IncrHalfMaxAllowedDimension / 2};
    }

    QTest::newRow("53: NO capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{0u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("54: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("55: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("56: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("57: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("58: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("59: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("60: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("61: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("62: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("63: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("64: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("65: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("66: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension0 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("67: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("68: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("69: capacity reserve for destination matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << StringMatrix{{c_DecrHalfMaxAllowedDimension, c_IncrHalfMaxAllowedDimension}, "Value2"} << matrix_size_t{1u} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
}

void StringMatrixCapacityTests::testReserveResizeAndEraseRowAndOrColumn_data()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("resizeRowsCount");
    QTest::addColumn<matrix_size_t>("resizeColumnsCount");
    QTest::addColumn<std::string>("resizeElementValue");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("erasedRowNr");
    QTest::addColumn<matrix_opt_size_t>("erasedColumnNr");
    QTest::addColumn<bool>("shouldEraseColumnBeforeRow");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{45u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("2: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{29u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("3: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{28u} << matrix_size_t{7u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{7u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("4: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{27u} << matrix_size_t{6u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{6u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("5: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{6u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("6: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{4u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{23u} << matrix_size_t{6u} << matrix_opt_size_t{9u} << matrix_opt_size_t{0u};
    QTest::newRow("7: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{3u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{20u} << matrix_size_t{6u} << matrix_opt_size_t{7u} << matrix_opt_size_t{0u};
    QTest::newRow("8: oversized row capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{18u} << matrix_size_t{2u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{18u} << matrix_size_t{6u} << matrix_opt_size_t{6u} << matrix_opt_size_t{0u};
    QTest::newRow("9: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{45u} << matrix_size_t{9u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{45u} << matrix_size_t{9u} << matrix_opt_size_t{19u} << matrix_opt_size_t{3u};
    QTest::newRow("10: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{29u} << matrix_size_t{8u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{29u} << matrix_size_t{8u} << matrix_opt_size_t{11u} << matrix_opt_size_t{2u};
    QTest::newRow("11: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{28u} << matrix_size_t{7u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{28u} << matrix_size_t{7u} << matrix_opt_size_t{10u} << matrix_opt_size_t{2u};
    QTest::newRow("12: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{27u} << matrix_size_t{6u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{27u} << matrix_size_t{6u} << matrix_opt_size_t{10u} << matrix_opt_size_t{1u};
    QTest::newRow("13: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{5u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{24u} << matrix_size_t{6u} << matrix_opt_size_t{8u} << matrix_opt_size_t{1u};
    QTest::newRow("14: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{4u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{23u} << matrix_size_t{6u} << matrix_opt_size_t{8u} << matrix_opt_size_t{1u};
    QTest::newRow("15: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{3u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{20u} << matrix_size_t{6u} << matrix_opt_size_t{6u} << matrix_opt_size_t{1u};
    QTest::newRow("16: oversized row capacity, erase column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{18u} << matrix_size_t{2u} << matrix_opt_size_t{} << matrix_opt_size_t{1u} << false << matrix_size_t{18u} << matrix_size_t{6u} << matrix_opt_size_t{5u} << matrix_opt_size_t{1u};
    QTest::newRow("17: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{45u} << matrix_size_t{41u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{41u} << matrix_opt_size_t{3u} << matrix_opt_size_t{17u};
    QTest::newRow("18: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{29u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{9u};
    QTest::newRow("19: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{28u} << matrix_size_t{24u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{9u};
    QTest::newRow("20: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{27u} << matrix_size_t{23u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{8u};
    QTest::newRow("21: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{12u} << matrix_size_t{20u} << matrix_opt_size_t{3u} << matrix_opt_size_t{7u};
    QTest::newRow("22: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{9u} << matrix_opt_size_t{7u};
    QTest::newRow("23: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{7u} << matrix_opt_size_t{5u};
    QTest::newRow("24: oversized row and column capacity, erase row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{2u} << matrix_opt_size_t{} << false << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{6u} << matrix_opt_size_t{4u};
    QTest::newRow("25: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{45u} << matrix_size_t{41u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("26: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{29u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("27: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{28u} << matrix_size_t{24u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("28: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{27u} << matrix_size_t{23u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("29: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("30: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{9u} << matrix_opt_size_t{8u};
    QTest::newRow("31: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{7u} << matrix_opt_size_t{6u};
    QTest::newRow("32: oversized row and column capacity, erase row then column") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << false << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{6u} << matrix_opt_size_t{5u};
    QTest::newRow("33: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{45u} << matrix_size_t{41u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("34: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{29u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("35: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{28u} << matrix_size_t{24u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("36: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{27u} << matrix_size_t{23u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("37: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{20u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("38: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{23u} << matrix_size_t{19u} << matrix_opt_size_t{9u} << matrix_opt_size_t{8u};
    QTest::newRow("39: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{20u} << matrix_size_t{16u} << matrix_opt_size_t{7u} << matrix_opt_size_t{6u};
    QTest::newRow("40: oversized row and column capacity, erase column then row") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{7u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u} << true << matrix_size_t{18u} << matrix_size_t{14u} << matrix_opt_size_t{6u} << matrix_opt_size_t{5u};
    QTest::newRow("41: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{45u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{9u} << matrix_size_t{12u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("42: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{29u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{8u} << matrix_size_t{12u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("43: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{7u} << matrix_size_t{28u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{7u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("44: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{6u} << matrix_size_t{27u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{6u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("45: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{24u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{6u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("46: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{4u} << matrix_size_t{23u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{6u} << matrix_size_t{23u} << matrix_opt_size_t{0u} << matrix_opt_size_t{9u};
    QTest::newRow("47: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{3u} << matrix_size_t{20u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{6u} << matrix_size_t{20u} << matrix_opt_size_t{0u} << matrix_opt_size_t{7u};
    QTest::newRow("48: oversized column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{18u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{6u} << matrix_size_t{18u} << matrix_opt_size_t{0u} << matrix_opt_size_t{6u};
    QTest::newRow("49: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{45u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{9u} << matrix_size_t{45u} << matrix_opt_size_t{2u} << matrix_opt_size_t{19u};
    QTest::newRow("50: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{29u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{8u} << matrix_size_t{29u} << matrix_opt_size_t{2u} << matrix_opt_size_t{11u};
    QTest::newRow("51: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{7u} << matrix_size_t{28u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{7u} << matrix_size_t{28u} << matrix_opt_size_t{1u} << matrix_opt_size_t{11u};
    QTest::newRow("52: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{6u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{6u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{10u};
    QTest::newRow("53: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{24u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{6u} << matrix_size_t{24u} << matrix_opt_size_t{1u} << matrix_opt_size_t{8u};
    QTest::newRow("54: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{4u} << matrix_size_t{23u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{6u} << matrix_size_t{23u} << matrix_opt_size_t{1u} << matrix_opt_size_t{8u};
    QTest::newRow("55: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{3u} << matrix_size_t{20u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{6u} << matrix_size_t{20u} << matrix_opt_size_t{1u} << matrix_opt_size_t{6u};
    QTest::newRow("56: oversized column capacity, erase row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{18u} << matrix_opt_size_t{1u} << matrix_opt_size_t{} << false << matrix_size_t{6u} << matrix_size_t{18u} << matrix_opt_size_t{1u} << matrix_opt_size_t{5u};
    QTest::newRow("57: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{41u} << matrix_size_t{45u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{41u} << matrix_size_t{12u} << matrix_opt_size_t{17u} << matrix_opt_size_t{3u};
    QTest::newRow("58: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{29u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{25u} << matrix_size_t{12u} << matrix_opt_size_t{9u} << matrix_opt_size_t{3u};
    QTest::newRow("59: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{28u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{24u} << matrix_size_t{12u} << matrix_opt_size_t{9u} << matrix_opt_size_t{3u};
    QTest::newRow("60: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{27u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{23u} << matrix_size_t{12u} << matrix_opt_size_t{8u} << matrix_opt_size_t{3u};
    QTest::newRow("61: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{24u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{20u} << matrix_size_t{12u} << matrix_opt_size_t{7u} << matrix_opt_size_t{3u};
    QTest::newRow("62: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{6u} << matrix_opt_size_t{9u};
    QTest::newRow("63: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{5u} << matrix_opt_size_t{8u};
    QTest::newRow("64: oversized row and column capacity, erase column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{} << matrix_opt_size_t{2u} << false << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{4u} << matrix_opt_size_t{7u};
    QTest::newRow("65: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{41u} << matrix_size_t{45u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("66: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{29u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("67: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{28u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("68: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("69: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{24u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("70: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{7u} << matrix_opt_size_t{9u};
    QTest::newRow("71: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{6u} << matrix_opt_size_t{8u};
    QTest::newRow("72: oversized row and column capacity, erase column then row") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << true << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{7u};
    QTest::newRow("73: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{41u} << matrix_size_t{45u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("74: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{29u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("75: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{28u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("76: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{27u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("77: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{20u} << matrix_size_t{24u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("78: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{19u} << matrix_size_t{23u} << matrix_opt_size_t{7u} << matrix_opt_size_t{9u};
    QTest::newRow("79: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{16u} << matrix_size_t{20u} << matrix_opt_size_t{6u} << matrix_opt_size_t{8u};
    QTest::newRow("80: oversized row and column capacity, erase row then column") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u} << false << matrix_size_t{14u} << matrix_size_t{18u} << matrix_opt_size_t{5u} << matrix_opt_size_t{7u};
}

void StringMatrixCapacityTests::_buildMovedCopiedVectorConstructorsTestingTable()
{
    QTest::addColumn<matrix_size_t>("rowsCount");
    QTest::addColumn<matrix_size_t>("columnsCount");
    QTest::addColumn<std::vector<std::string>>("initList");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small size matrix") << matrix_size_t{3u} << matrix_size_t{4u} << std::vector<std::string>(12, "Value") << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small size matrix") << matrix_size_t{4u} << matrix_size_t{3u} << std::vector<std::string>(12, "Value") << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: large size matrix") << matrix_size_t{8u} << matrix_size_t{10u} << std::vector<std::string>(80, "Value") << matrix_size_t{10u} << matrix_size_t{12u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("4: large size matrix") << matrix_size_t{10u} << matrix_size_t{8u} << std::vector<std::string>(80, "Value") << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("5: capped row and column capacity") << c_LargeDimension1 << c_LargeDimension1 << std::vector<std::string>(c_LargeDimension1 * c_LargeDimension1, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("6: capped row and column capacity") << c_LargeDimension1 << c_MaxAllowedDimension << std::vector<std::string>(c_LargeDimension1 * c_MaxAllowedDimension, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("7: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension1 << std::vector<std::string>(c_MaxAllowedDimension * c_LargeDimension1, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("8: capped row and column capacity") << c_LargeDimension2 << c_LargeDimension2 << std::vector<std::string>(c_LargeDimension2 * c_LargeDimension2, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: capped row and column capacity") << c_LargeDimension2 << c_MaxAllowedDimension << std::vector<std::string>(c_LargeDimension2 * c_MaxAllowedDimension, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension2 << std::vector<std::string>(c_MaxAllowedDimension * c_LargeDimension2, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: capped row and column capacity") << c_MaxAllowedDimension << c_MaxAllowedDimension << std::vector<std::string>(c_MaxAllowedDimension * c_MaxAllowedDimension, "Value") << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: capped row capacity") << c_LargeDimension1 << matrix_size_t{3u} << std::vector<std::string>(c_LargeDimension1 * 3, "Value") << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("13: capped row capacity") << c_LargeDimension2 << matrix_size_t{3u} << std::vector<std::string>(c_LargeDimension2 * 3, "Value") << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{4u} << std::vector<std::string>(c_MaxAllowedDimension * 4, "Value") << c_MaxAllowedDimension << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: capped row capacity") << c_LargeDimension1 << matrix_size_t{8u} << std::vector<std::string>(c_LargeDimension1 * 8, "Value") << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("16: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{10u} << std::vector<std::string>(c_MaxAllowedDimension * 10, "Value") << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: capped row capacity") << c_LargeDimension2 << matrix_size_t{10u} << std::vector<std::string>(c_LargeDimension2 * 10, "Value") << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("18: capped column capacity") << matrix_size_t{3u} << c_LargeDimension1 << std::vector<std::string>(3 * c_LargeDimension1, "Value") << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("19: capped column capacity") << matrix_size_t{3u} << c_LargeDimension2 << std::vector<std::string>(3 * c_LargeDimension2, "Value") << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("20: capped column capacity") << matrix_size_t{4u} << c_MaxAllowedDimension << std::vector<std::string>(4 * c_MaxAllowedDimension, "Value") << matrix_size_t{5u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("21: capped column capacity") << matrix_size_t{8u} << c_LargeDimension1 << std::vector<std::string>(8 * c_LargeDimension1, "Value") << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("22: capped column capacity") << matrix_size_t{10u} << c_MaxAllowedDimension << std::vector<std::string>(10 * c_MaxAllowedDimension, "Value") << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("23: capped column capacity") << matrix_size_t{10u} << c_LargeDimension2 << std::vector<std::string>(10 * c_LargeDimension2, "Value") << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildMoveCopyConstructorsTestingTable()
{
    QTest::addColumn<matrix_size_t>("rowsCount");
    QTest::addColumn<matrix_size_t>("columnsCount");
    QTest::addColumn<std::string>("elementValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small size matrix") << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value"} << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small size matrix") << matrix_size_t{4u} << matrix_size_t{3u} << std::string{"Value"} << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: medium size matrix") << matrix_size_t{7u} << matrix_size_t{8u} << std::string{"Value"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("4: medium size matrix") << matrix_size_t{8u} << matrix_size_t{7u} << std::string{"Value"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("5: large size matrix") << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("6: large size matrix") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("7: capped row and column capacity") << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("8: capped row and column capacity") << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("9: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("10: capped row and column capacity") << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: capped row and column capacity") << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: capped row and column capacity") << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: capped row capacity") << c_LargeDimension1 << matrix_size_t{3u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("15: capped row capacity") << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("16: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{4u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("17: capped row capacity") << c_LargeDimension1 << matrix_size_t{8u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("18: capped row capacity") << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("19: capped row capacity") << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("20: capped column capacity") << matrix_size_t{3u} << c_LargeDimension1 << std::string{"Value"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("21: capped column capacity") << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: capped column capacity") << matrix_size_t{4u} << c_MaxAllowedDimension << std::string{"Value"} << matrix_size_t{5u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("23: capped column capacity") << matrix_size_t{8u} << c_LargeDimension1 << std::string{"Value"} << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("24: capped column capacity") << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("25: capped column capacity") << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildAssignmentOperatorsTestingTable()
{
    QTest::addColumn<matrix_size_t>("srcMatrixRowsCount");
    QTest::addColumn<matrix_size_t>("srcMatrixColumnsCount");
    QTest::addColumn<std::string>("srcMatrixElementValue");
    QTest::addColumn<matrix_size_t>("destMatrixRowsCount");
    QTest::addColumn<matrix_size_t>("destMatrixColumnsCount");
    QTest::addColumn<std::string>("destMatrixElementValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: destination matrix initially empty") << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: destination matrix initially empty") << matrix_size_t{4u} << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: destination matrix initially empty") << matrix_size_t{7u} << matrix_size_t{8u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("4: destination matrix initially empty") << matrix_size_t{8u} << matrix_size_t{7u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("5: destination matrix initially empty") << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("6: destination matrix initially empty") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("7: destination matrix initially empty, capped row and column capacity") << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("8: destination matrix initially empty, capped row and column capacity") << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("9: destination matrix initially empty, capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("10: destination matrix initially empty, capped row and column capacity") << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: destination matrix initially empty, capped row and column capacity") << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: destination matrix initially empty, capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: destination matrix initially empty, capped row and column capacity") << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("14: destination matrix initially empty, capped row capacity") << c_LargeDimension1 << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("15: destination matrix initially empty, capped row capacity") << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("16: destination matrix initially empty, capped row capacity") << c_MaxAllowedDimension << matrix_size_t{4u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("17: destination matrix initially empty, capped row capacity") << c_LargeDimension1 << matrix_size_t{8u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("18: destination matrix initially empty, capped row capacity") << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("19: destination matrix initially empty, capped row capacity") << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("20: destination matrix initially empty, capped column capacity") << matrix_size_t{3u} << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("21: destination matrix initially empty, capped column capacity") << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: destination matrix initially empty, capped column capacity") << matrix_size_t{4u} << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{5u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("23: destination matrix initially empty, capped column capacity") << matrix_size_t{8u} << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("24: destination matrix initially empty, capped column capacity") << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("25: destination matrix initially empty, capped column capacity") << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{0u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("26: destination matrix initially NOT empty") << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value1"} << matrix_size_t{2u} << matrix_size_t{3u} << std::string{"Value3"} << matrix_size_t{3u} << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("27: destination matrix initially NOT empty") << matrix_size_t{4u} << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{2u} << matrix_size_t{3u} << std::string{"Value3"} << matrix_size_t{5u} << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("28: destination matrix initially NOT empty") << matrix_size_t{7u} << matrix_size_t{8u} << std::string{"Value1"} << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value3"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("29: destination matrix initially NOT empty") << matrix_size_t{8u} << matrix_size_t{7u} << std::string{"Value1"} << matrix_size_t{3u} << matrix_size_t{4u} << std::string{"Value3"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("30: destination matrix initially NOT empty") << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value1"} << matrix_size_t{15u} << matrix_size_t{20u} << std::string{"Value3"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("31: destination matrix initially NOT empty") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value1"} << matrix_size_t{15u} << matrix_size_t{20u} << std::string{"Value3"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("32: destination matrix initially NOT empty") << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value1"} << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value3"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("33: destination matrix initially NOT empty") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value1"} << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value3"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("34: destination matrix initially NOT empty") << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value1"} << matrix_size_t{25u} << matrix_size_t{20u} << std::string{"Value3"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("35: destination matrix initially NOT empty") << matrix_size_t{15u} << matrix_size_t{20u} << std::string{"Value1"} << matrix_size_t{20u} << matrix_size_t{25u} << std::string{"Value3"} << matrix_size_t{18u} << matrix_size_t{25u} << matrix_opt_size_t{1u} << matrix_opt_size_t{2u};
    QTest::newRow("36: destination matrix initially NOT empty, capped row and column capacity") << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("37: destination matrix initially NOT empty, capped row and column capacity") << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("38: destination matrix initially NOT empty, capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{8u} << matrix_size_t{10u} << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("39: destination matrix initially NOT empty, capped row and column capacity") << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("40: destination matrix initially NOT empty, capped row and column capacity") << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{8u} << c_MaxAllowedDimension << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("41: destination matrix initially NOT empty, capped row and column capacity") << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value1"} << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("42: destination matrix initially NOT empty, capped row and column capacity") << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value3"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("43: destination matrix initially NOT empty, capped row capacity") << c_LargeDimension1 << matrix_size_t{3u} << std::string{"Value1"} << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("44: destination matrix initially NOT empty, capped row capacity") << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value1"} << c_MaxAllowedDimension << matrix_size_t{3u} << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{3u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("45: destination matrix initially NOT empty, capped row capacity") << c_MaxAllowedDimension << matrix_size_t{4u} << std::string{"Value1"} << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{5u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: destination matrix initially NOT empty, capped row capacity") << c_LargeDimension1 << matrix_size_t{8u} << std::string{"Value1"} << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("47: destination matrix initially NOT empty, capped row capacity") << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value1"} << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("48: destination matrix initially NOT empty, capped row capacity") << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value1"} << c_LargeDimension1 << matrix_size_t{10u} << std::string{"Value3"} << c_MaxAllowedDimension << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("49: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{3u} << c_LargeDimension1 << std::string{"Value1"} << c_LargeDimension2 << matrix_size_t{3u} << std::string{"Value3"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("50: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{3u} << c_MaxAllowedDimension << std::string{"Value3"} << matrix_size_t{3u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("51: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{4u} << c_MaxAllowedDimension << std::string{"Value1"} << matrix_size_t{3u} << c_LargeDimension2 << std::string{"Value3"} << matrix_size_t{5u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("52: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{8u} << c_LargeDimension1 << std::string{"Value1"} << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value3"} << matrix_size_t{10u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("53: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value1"} << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value3"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("54: destination matrix initially NOT empty, capped column capacity") << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value1"} << matrix_size_t{10u} << c_LargeDimension1 << std::string{"Value3"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildReserveAndResizeTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("resizeRowsCount");
    QTest::addColumn<matrix_size_t>("resizeColumnsCount");
    QTest::addColumn<std::string>("resizeElementValue");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("2: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("5: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("6: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("7: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("8: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("9: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("10: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("13: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("14: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("15: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("16: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("17: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("18: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("19: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("20: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("21: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("22: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("23: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("24: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("25: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("26: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("27: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("28: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("29: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{6u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("30: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("31: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("32: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("33: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("34: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("35: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("36: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{6u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("37: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("38: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("39: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("40: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("41: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("42: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("43: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("44: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("45: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("47: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("48: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("49: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("50: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("51: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("52: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("53: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("54: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("55: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("56: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("57: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("58: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("59: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("60: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("61: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("62: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("63: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("64: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("65: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("66: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("67: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("68: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("69: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("70: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("71: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("72: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("73: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("74: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("75: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("76: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("77: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("78: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("79: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("80: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("81: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("82: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("83: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("84: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("85: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("86: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{8u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("87: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("88: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("89: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("90: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("91: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("92: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("93: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("94: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("95: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("96: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("97: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("98: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("99: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("100: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("101: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("102: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("103: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("104: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("105: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("106: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("107: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("108: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("109: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("110: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("111: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("112: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("113: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("114: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("115: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{2u} << matrix_opt_size_t{1u};
    QTest::newRow("116: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("117: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("118: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("119: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("120: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("121: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("122: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("123: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("124: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("125: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{6u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("126: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("127: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("128: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("129: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("130: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("131: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("132: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("133: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("134: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("135: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("136: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("137: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("138: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("139: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{6u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("140: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("141: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("142: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("143: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("144: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("145: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("146: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{6u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("147: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("148: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("149: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("150: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("151: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("152: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("153: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("154: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("155: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("156: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("157: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("158: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("159: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("160: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("161: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("162: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("163: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("164: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("165: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("166: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("167: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("168: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("169: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("170: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("171: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("172: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("173: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("174: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("175: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("176: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("177: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("178: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("179: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("180: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("181: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("182: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("183: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("184: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("185: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("186: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("187: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("188: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("189: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("190: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("191: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("192: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("193: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("194: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("195: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("196: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("197: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("198: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("199: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("200: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("201: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("202: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("203: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("204: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("205: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("206: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("207: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("208: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("209: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("210: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("211: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("212: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("213: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("214: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("215: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("216: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("217: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("218: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("219: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("220: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("221: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("222: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("223: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("224: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("225: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("226: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("227: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("228: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("229: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("230: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{6u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("231: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("232: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("233: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("234: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("235: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("236: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("237: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{6u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("238: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("239: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("240: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("241: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("242: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("243: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("244: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{6u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("245: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("246: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("247: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("248: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("249: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("250: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("251: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("252: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("253: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("254: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("255: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("256: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("257: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("258: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("259: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("260: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("261: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("262: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("263: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("264: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("265: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("266: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("267: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("268: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("269: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("270: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("271: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("272: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("273: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("274: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("275: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("276: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("277: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("278: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("279: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("280: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("281: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("282: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("283: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("284: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("285: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("286: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("287: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("288: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{9u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("289: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("290: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("291: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("292: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("293: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("294: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("295: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{7u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("296: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{8u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("297: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("298: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_size_t{11u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("299: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("300: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{11u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("301: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{7u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("302: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{8u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("303: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("304: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("305: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("306: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{0u} << matrix_size_t{12u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("307: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{7u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("308: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{8u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("309: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("310: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("311: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("312: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{0u} << matrix_size_t{13u} << matrix_size_t{9u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("313: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{11u} << matrix_size_t{9u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("314: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("315: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("316: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("317: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("318: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("319: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("320: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("321: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("322: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("323: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("324: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("325: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("326: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("327: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("328: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("329: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("330: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("331: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("332: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("333: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("334: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("335: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("336: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("337: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("338: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("339: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("340: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("341: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("342: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("343: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("344: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("345: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("346: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("347: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("348: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("349: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("350: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("351: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("352: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("353: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("354: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("355: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("356: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("357: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("358: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("359: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("360: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("361: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("362: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("363: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("364: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("365: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("366: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("367: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("368: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("369: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("370: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("371: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("372: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("373: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("374: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("375: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("376: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("377: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("378: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("379: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("380: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("381: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("382: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("383: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("384: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("385: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("386: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("387: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("388: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("389: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("390: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("391: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("392: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("393: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("394: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("395: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("396: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("397: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("398: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("399: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("400: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("401: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("402: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("403: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("404: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("405: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("406: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("407: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("408: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("409: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("410: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("411: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("412: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("413: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("414: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("415: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("416: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("417: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("418: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("419: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("420: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("421: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("422: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("423: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("424: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("425: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("426: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("427: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("428: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("429: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("430: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("431: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("432: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("433: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("434: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("435: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("436: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("437: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("438: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("439: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("440: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("441: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("442: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("443: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("444: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("445: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("446: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("447: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("448: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("449: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("450: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("451: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("452: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("453: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("454: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("455: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("456: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("457: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("458: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("459: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("460: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("461: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("462: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("463: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("464: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("465: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("466: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("467: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("468: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("469: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("470: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("471: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("472: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("473: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("474: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("475: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("476: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("477: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("478: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("479: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("480: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("481: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("482: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension2}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("483: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("484: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("485: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("486: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("487: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("488: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("489: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("490: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("491: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("492: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("493: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("494: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("495: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("496: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("497: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("498: equal rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("499: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("500: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("501: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("502: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("503: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("504: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("505: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("506: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("507: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("508: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("509: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("510: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("511: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("512: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("513: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("514: equal rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("515: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("516: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("517: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("518: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("519: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("520: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("521: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("522: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("523: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("524: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("525: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("526: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("527: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("528: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("529: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("530: more rows, equal columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("531: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("532: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("533: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("534: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("535: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("536: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("537: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("538: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("539: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("540: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("541: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("542: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("543: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("544: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("545: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("546: more rows, more columns") << StringMatrix{{c_LargeDimension1, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("547: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension0 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("548: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("549: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("550: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("551: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("552: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension0 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("553: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("554: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("555: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("556: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("557: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension0 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("558: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("559: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("560: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("561: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("562: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("563: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("564: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("565: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("566: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("567: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("568: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("569: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("570: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("571: equal rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("572: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("573: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("574: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("575: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("576: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("577: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("578: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("579: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("580: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("581: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("582: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("583: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("584: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("585: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("586: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("587: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("588: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("589: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("590: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("591: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("592: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("593: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("594: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("595: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("596: equal rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("597: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension0 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("598: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("599: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("600: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("601: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("602: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension0 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("603: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("604: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("605: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("606: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("607: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension0 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("608: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("609: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("610: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("611: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("612: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("613: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("614: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("615: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("616: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("617: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension0 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("618: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("619: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("620: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("621: more rows, equal columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("622: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("623: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("624: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("625: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("626: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension0 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("627: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension0 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("628: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("629: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("630: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("631: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension1 << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("632: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension0 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("633: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension1 << c_LargeDimension2 << c_LargeDimension1 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("634: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("635: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("636: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_LargeDimension2 << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("637: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("638: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("639: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("640: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("641: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("642: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension0 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("643: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension1 << c_MaxAllowedDimension << c_LargeDimension1 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("644: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_LargeDimension2 << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("645: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("646: more rows, more columns") << StringMatrix{{c_LargeDimension0, c_LargeDimension0}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_ExceedingDimension << c_ExceedingDimension << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};

    // empty matrix
    QTest::newRow("647: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{0u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("648: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("649: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{0u} << matrix_size_t{2u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("650: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{1u} << matrix_size_t{0u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("651: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("652: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{1u} << matrix_size_t{2u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("653: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{0u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("654: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("655: more rows, more columns") << StringMatrix{} << matrix_size_t{1u} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{2u} << matrix_size_t{1u} << matrix_size_t{1u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildResizeTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("resizeRowsCount");
    QTest::addColumn<matrix_size_t>("resizeColumnsCount");
    QTest::addColumn<std::string>("resizeElementValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: less rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("2: less rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("3: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("4: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("5: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("6: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{12u} << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("7: less rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{9u} << c_MaxAllowedDimension << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("8: equal rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("9: equal rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("10: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("11: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("12: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("13: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{12u} << c_LargeDimension2 << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("14: equal rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("15: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("16: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{7u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("18: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{7u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("19: more rows, less columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{7u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("20: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("21: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("22: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{8u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("23: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{8u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("24: more rows, equal columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{8u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("25: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("26: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("27: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("28: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{12u} << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("29: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{11u} << c_MaxAllowedDimension << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("30: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("31: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("32: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("33: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{12u} << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("34: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{12u} << c_MaxAllowedDimension << std::string{"Value2"} << matrix_size_t{12u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("35: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("36: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("37: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{13u} << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("38: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{13u} << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("39: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << matrix_size_t{13u} << c_MaxAllowedDimension << std::string{"Value2"} << matrix_size_t{13u} << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("40: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{9u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("41: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{10u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("42: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << matrix_size_t{11u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("43: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_LargeDimension2 << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("44: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("45: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{9u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("46: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{10u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("47: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{11u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{11u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("48: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_LargeDimension2 << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("49: more rows, more columns") << StringMatrix{{10, 8}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};

    const matrix_size_t c_RowsCount{10};
    const matrix_opt_size_t c_MaxDimensionRowCapacityOffset{(c_MaxAllowedDimension - c_RowsCount) / 2};

    QTest::newRow("50: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{10u} << matrix_size_t{8u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("51: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{10u} << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("52: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << matrix_size_t{8u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("53: less rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("54: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{10u} << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("55: less rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("56: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{10u} << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{1u};
    QTest::newRow("57: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{10u} << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << c_MaxDimensionRowCapacityOffset << matrix_opt_size_t{0u};
    QTest::newRow("58: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{1u};
    QTest::newRow("59: less rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("60: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << matrix_size_t{8u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("61: equal rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("62: equal rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("63: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("64: equal rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_LargeDimension2 << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("65: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << matrix_size_t{8u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("66: more rows, less columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("67: more rows, equal columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("68: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("69: more rows, more columns") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << c_MaxAllowedDimension << c_MaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildInsertRowTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("insertPosition");
    QTest::addColumn<std::string>("insertedRowValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small matrix") << StringMatrix{{3, 4}, "Value1"} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{6u} << matrix_size_t{5u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small matrix") << StringMatrix{{6, 5}, "Value1"} << matrix_size_t{3u} << std::string{"Value2"} << matrix_size_t{7u} << matrix_size_t{6u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: small matrix") << StringMatrix{{8, 2}, "Value1"} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{2u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: small matrix") << StringMatrix{{8, 2}, "Value1"} << matrix_size_t{5u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{2u} << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("5: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("6: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("7: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{12u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("8: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{13u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("9: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{25u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{25u} << matrix_opt_size_t{3u} << matrix_opt_size_t{2u};
    QTest::newRow("10: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2 - 1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2 + 1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("14: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("15: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("16: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension2 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("17: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
}

void StringMatrixCapacityTests::_buildInsertColumnTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("insertPosition");
    QTest::addColumn<std::string>("insertedColumnValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small matrix") << StringMatrix{{4, 3}, "Value1"} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{6u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("2: small matrix") << StringMatrix{{5, 6}, "Value1"} << matrix_size_t{3u} << std::string{"Value2"} << matrix_size_t{6u} << matrix_size_t{7u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("3: small matrix") << StringMatrix{{2, 8}, "Value1"} << matrix_size_t{1u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("4: small matrix") << StringMatrix{{2, 8}, "Value1"} << matrix_size_t{5u} << std::string{"Value2"} << matrix_size_t{2u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("5: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("6: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("7: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{12u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{2u};
    QTest::newRow("8: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{13u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("9: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{25u} << std::string{"Value2"} << matrix_size_t{25u} << matrix_size_t{31u} << matrix_opt_size_t{2u} << matrix_opt_size_t{3u};
    QTest::newRow("10: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("11: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2 - 1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("12: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{0u};
    QTest::newRow("13: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension1 / 2 + 1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("14: extra large matrix") << StringMatrix{{c_LargeDimension2, c_LargeDimension1}, "Value1"} << matrix_size_t{c_LargeDimension1} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{0u} << matrix_opt_size_t{1u};
    QTest::newRow("15: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("16: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension2 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
    QTest::newRow("17: extra large matrix") << StringMatrix{{c_LargeDimension1, c_LargeDimension2}, "Value1"} << matrix_size_t{c_LargeDimension2} << std::string{"Value2"} << c_MaxAllowedDimension << c_MaxAllowedDimension << matrix_opt_size_t{1u} << matrix_opt_size_t{0u};
}

void StringMatrixCapacityTests::_buildReserveAndInsertRowTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("requestedRowCapacity");
    QTest::addColumn<matrix_size_t>("insertPosition");
    QTest::addColumn<std::string>("insertedRowValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small matrix") << StringMatrix{{5, 4}, "Value1"} << matrix_size_t{5u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("2: small matrix") << StringMatrix{{5, 4}, "Value1"} << matrix_size_t{5u} << matrix_size_t{2u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("3: small matrix") << StringMatrix{{5, 4}, "Value1"} << matrix_size_t{5u} << matrix_size_t{5u} << std::string{"Value2"} << matrix_size_t{10u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("4: small matrix") << StringMatrix{{6, 4}, "Value1"} << matrix_size_t{6u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("5: small matrix") << StringMatrix{{6, 4}, "Value1"} << matrix_size_t{6u} << matrix_size_t{3u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("6: small matrix") << StringMatrix{{6, 4}, "Value1"} << matrix_size_t{6u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{12u} << matrix_size_t{5u} << matrix_opt_size_t{2u} << matrix_opt_size_t{0u};
    QTest::newRow("7: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{20u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{40u} << matrix_size_t{31u} << matrix_opt_size_t{9u} << matrix_opt_size_t{3u};
    QTest::newRow("8: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{20u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{40u} << matrix_size_t{31u} << matrix_opt_size_t{9u} << matrix_opt_size_t{3u};
    QTest::newRow("9: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{20u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{40u} << matrix_size_t{31u} << matrix_opt_size_t{9u} << matrix_opt_size_t{3u};
    QTest::newRow("10: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{21u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("11: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{21u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("12: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{21u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("13: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("14: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("15: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("16: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("17: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("18: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("19: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("20: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("21: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("22: large matrix") << StringMatrix{{20, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("23: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{42u} << matrix_size_t{31u} << matrix_opt_size_t{10u} << matrix_opt_size_t{3u};
    QTest::newRow("24: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{42u} << matrix_size_t{31u} << matrix_opt_size_t{10u} << matrix_opt_size_t{3u};
    QTest::newRow("25: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{21u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{42u} << matrix_size_t{31u} << matrix_opt_size_t{10u} << matrix_opt_size_t{3u};
    QTest::newRow("26: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("27: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("28: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{22u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{22u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("29: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("30: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("31: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("32: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("33: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{23u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{23u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("34: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{24u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("35: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{24u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("36: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{24u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("37: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{24u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("38: large matrix") << StringMatrix{{21, 25}, "Value1"} << matrix_size_t{24u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{24u} << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("39a: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_LargeDimension1 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("40a: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{c_DecrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_LargeDimension1 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("41a: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << c_DecrHalfMaxAllowedDimension << std::string{"Value2"} << c_LargeDimension1 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("42a: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("43a: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{c_HalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("44a: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << c_HalfMaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("45a: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1} << matrix_opt_size_t{3u};
        QTest::newRow("46a: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{c_IncrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1} << matrix_opt_size_t{3u};
        QTest::newRow("47a: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << c_IncrHalfMaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1} << matrix_opt_size_t{3u};
    }
    else
    {
        QTest::newRow("39b: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_LargeDimension0 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("40b: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{c_DecrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_LargeDimension0 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("41b: extra large matrix") << StringMatrix{{c_DecrHalfMaxAllowedDimension, 25}, "Value1"} << c_DecrHalfMaxAllowedDimension << c_DecrHalfMaxAllowedDimension << std::string{"Value2"} << c_LargeDimension0 << matrix_size_t{31u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2} << matrix_opt_size_t{3u};
        QTest::newRow("42b: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("43b: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{c_HalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("44b: extra large matrix") << StringMatrix{{c_HalfMaxAllowedDimension, 25}, "Value1"} << c_HalfMaxAllowedDimension << c_HalfMaxAllowedDimension << std::string{"Value2"} << c_LargeDimension2 << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("45b: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("46b: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{c_IncrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
        QTest::newRow("47b: extra large matrix") << StringMatrix{{c_IncrHalfMaxAllowedDimension, 25}, "Value1"} << c_IncrHalfMaxAllowedDimension << c_IncrHalfMaxAllowedDimension << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2} << matrix_opt_size_t{3u};
    }

    constexpr matrix_opt_size_t c_ThreeQuartersCapacityOffset{(c_MaxAllowedDimension - c_ThreeQuartersMaxAllowedDimension - 1) / 2};

    QTest::newRow("48: extra large matrix") << StringMatrix{{c_ThreeQuartersMaxAllowedDimension, 25}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << c_ThreeQuartersCapacityOffset << matrix_opt_size_t{3u};
    QTest::newRow("49: extra large matrix") << StringMatrix{{c_ThreeQuartersMaxAllowedDimension, 25}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{c_ThreeQuartersMaxAllowedDimension / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << c_ThreeQuartersCapacityOffset << matrix_opt_size_t{3u};
    QTest::newRow("50: extra large matrix") << StringMatrix{{c_ThreeQuartersMaxAllowedDimension, 25}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{c_ThreeQuartersMaxAllowedDimension} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << c_ThreeQuartersCapacityOffset << matrix_opt_size_t{3u};
    QTest::newRow("51: extra large matrix") << StringMatrix{{c_LargeDimension0, 25}, "Value1"} << c_LargeDimension0 << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("52: extra large matrix") << StringMatrix{{c_LargeDimension0, 25}, "Value1"} << c_LargeDimension0 << matrix_size_t{c_LargeDimension0 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("53: extra large matrix") << StringMatrix{{c_LargeDimension0, 25}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{1u} << matrix_opt_size_t{3u};
    QTest::newRow("54: extra large matrix") << StringMatrix{{c_LargeDimension1, 25}, "Value1"} << c_LargeDimension1 << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("55: extra large matrix") << StringMatrix{{c_LargeDimension1, 25}, "Value1"} << c_LargeDimension1 << matrix_size_t{c_LargeDimension1 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("56: extra large matrix") << StringMatrix{{c_LargeDimension1, 25}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("57: extra large matrix") << StringMatrix{{c_LargeDimension2, 25}, "Value1"} << c_LargeDimension2 << matrix_size_t{0u} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("58: extra large matrix") << StringMatrix{{c_LargeDimension2, 25}, "Value1"} << c_LargeDimension2 << matrix_size_t{c_LargeDimension2 / 2} << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
    QTest::newRow("59: extra large matrix") << StringMatrix{{c_LargeDimension2, 25}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << c_MaxAllowedDimension << matrix_size_t{31u} << matrix_opt_size_t{0u} << matrix_opt_size_t{3u};
}

void StringMatrixCapacityTests::_buildReserveAndInsertColumnTestingTable()
{
    QTest::addColumn<StringMatrix>("matrix");
    QTest::addColumn<matrix_size_t>("requestedColumnCapacity");
    QTest::addColumn<matrix_size_t>("insertPosition");
    QTest::addColumn<std::string>("insertedColumnValue");
    QTest::addColumn<matrix_size_t>("expectedRowCapacity");
    QTest::addColumn<matrix_size_t>("expectedColumnCapacity");
    QTest::addColumn<matrix_opt_size_t>("expectedRowCapacityOffset");
    QTest::addColumn<matrix_opt_size_t>("expectedColumnCapacityOffset");

    QTest::newRow("1: small matrix") << StringMatrix{{4, 5}, "Value1"} << matrix_size_t{5u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("2: small matrix") << StringMatrix{{4, 5}, "Value1"} << matrix_size_t{5u} << matrix_size_t{2u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("3: small matrix") << StringMatrix{{4, 5}, "Value1"} << matrix_size_t{5u} << matrix_size_t{5u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{10u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("4: small matrix") << StringMatrix{{4, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("5: small matrix") << StringMatrix{{4, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{3u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("6: small matrix") << StringMatrix{{4, 6}, "Value1"} << matrix_size_t{6u} << matrix_size_t{6u} << std::string{"Value2"} << matrix_size_t{5u} << matrix_size_t{12u} << matrix_opt_size_t{0u} << matrix_opt_size_t{2u};
    QTest::newRow("7: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{20u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{40u} << matrix_opt_size_t{3u} << matrix_opt_size_t{9u};
    QTest::newRow("8: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{20u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{40u} << matrix_opt_size_t{3u} << matrix_opt_size_t{9u};
    QTest::newRow("9: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{20u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{40u} << matrix_opt_size_t{3u} << matrix_opt_size_t{9u};
    QTest::newRow("10: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{21u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{21u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("11: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{21u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{21u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("12: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{21u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{21u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("13: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{22u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("14: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{22u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("15: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{22u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("16: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{22u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("17: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{22u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("18: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{23u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("19: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{23u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("20: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{23u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("21: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{23u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("22: large matrix") << StringMatrix{{25, 20}, "Value1"} << matrix_size_t{23u} << matrix_size_t{20u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("23: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{21u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{42u} << matrix_opt_size_t{3u} << matrix_opt_size_t{10u};
    QTest::newRow("24: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{21u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{42u} << matrix_opt_size_t{3u} << matrix_opt_size_t{10u};
    QTest::newRow("25: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{21u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{42u} << matrix_opt_size_t{3u} << matrix_opt_size_t{10u};
    QTest::newRow("26: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{22u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("27: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{22u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("28: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{22u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{22u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("29: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{23u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("30: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{23u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("31: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{23u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("32: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{23u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("33: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{23u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{23u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("34: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{24u} << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("35: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{24u} << matrix_size_t{9u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("36: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{24u} << matrix_size_t{10u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("37: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{24u} << matrix_size_t{11u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("38: large matrix") << StringMatrix{{25, 21}, "Value1"} << matrix_size_t{24u} << matrix_size_t{21u} << std::string{"Value2"} << matrix_size_t{31u} << matrix_size_t{24u} << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};

    if constexpr (c_IsEvenMaxAllowedDimension)
    {
        QTest::newRow("39a: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension1 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("40a: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{c_DecrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension1 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("41a: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << c_DecrHalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension1 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("42a: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("43a: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{c_HalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("44a: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << c_HalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("45a: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1};
        QTest::newRow("46a: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{c_IncrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1};
        QTest::newRow("47a: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << c_IncrHalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_HalfMaxAllowedDimension / 2 - 1};
    }
    else
    {
        QTest::newRow("39b: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension0 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("40b: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << matrix_size_t{c_DecrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension0 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("41b: extra large matrix") << StringMatrix{{25, c_DecrHalfMaxAllowedDimension}, "Value1"} << c_DecrHalfMaxAllowedDimension << c_DecrHalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension0 << matrix_opt_size_t{3u} << matrix_opt_size_t{(c_DecrHalfMaxAllowedDimension - 1) / 2};
        QTest::newRow("42b: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension2 << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("43b: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << matrix_size_t{c_HalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension2 << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("44b: extra large matrix") << StringMatrix{{25, c_HalfMaxAllowedDimension}, "Value1"} << c_HalfMaxAllowedDimension << c_HalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_LargeDimension2 << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("45b: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("46b: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << matrix_size_t{c_IncrHalfMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
        QTest::newRow("47b: extra large matrix") << StringMatrix{{25, c_IncrHalfMaxAllowedDimension}, "Value1"} << c_IncrHalfMaxAllowedDimension << c_IncrHalfMaxAllowedDimension << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{c_DecrHalfMaxAllowedDimension / 2};
    }

    constexpr matrix_opt_size_t c_ThreeQuartersCapacityOffset{(c_MaxAllowedDimension - c_ThreeQuartersMaxAllowedDimension - 1) / 2};

    QTest::newRow("48: extra large matrix") << StringMatrix{{25, c_ThreeQuartersMaxAllowedDimension}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << c_ThreeQuartersCapacityOffset;
    QTest::newRow("49: extra large matrix") << StringMatrix{{25, c_ThreeQuartersMaxAllowedDimension}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{c_ThreeQuartersMaxAllowedDimension / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << c_ThreeQuartersCapacityOffset;
    QTest::newRow("50: extra large matrix") << StringMatrix{{25, c_ThreeQuartersMaxAllowedDimension}, "Value1"} << c_ThreeQuartersMaxAllowedDimension << matrix_size_t{c_ThreeQuartersMaxAllowedDimension} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << c_ThreeQuartersCapacityOffset;
    QTest::newRow("51: extra large matrix") << StringMatrix{{25, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("52: extra large matrix") << StringMatrix{{25, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << matrix_size_t{c_LargeDimension0 / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("53: extra large matrix") << StringMatrix{{25, c_LargeDimension0}, "Value1"} << c_LargeDimension0 << c_LargeDimension0 << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{1u};
    QTest::newRow("54: extra large matrix") << StringMatrix{{25, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("55: extra large matrix") << StringMatrix{{25, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << matrix_size_t{c_LargeDimension1 / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("56: extra large matrix") << StringMatrix{{25, c_LargeDimension1}, "Value1"} << c_LargeDimension1 << c_LargeDimension1 << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("57: extra large matrix") << StringMatrix{{25, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << matrix_size_t{0u} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("58: extra large matrix") << StringMatrix{{25, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << matrix_size_t{c_LargeDimension2 / 2} << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
    QTest::newRow("59: extra large matrix") << StringMatrix{{25, c_LargeDimension2}, "Value1"} << c_LargeDimension2 << c_LargeDimension2 << std::string{"Value2"} << matrix_size_t{31u} << c_MaxAllowedDimension << matrix_opt_size_t{3u} << matrix_opt_size_t{0u};
}

QTEST_APPLESS_MAIN(StringMatrixCapacityTests)

#include "tst_stringmatrixcapacitytests.moc"
